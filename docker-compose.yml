services:
  db:
    container_name: postgresql_db
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    env_file:
      - .env  # Explicitly load the .env file
    environment:
      - POSTGRES_USER=${FAST__DB__USER}
      - POSTGRES_PASSWORD=${FAST__DB__PASSWORD}
      - POSTGRES_DB=${FAST__DB__NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - db-data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=someemail@gmail.come
      - PGADMIN_DEFAULT_PASSWORD=somepassword
    ports:
      - 5050:80
    depends_on:
      - db
  backend:
    image: fastapi-container
    build: 
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      celery_worker:
        condition: service_started
      celery_beat:
        condition: service_started
    env_file:
      - .env  # Explicitly load the .env file
    environment:
      - DB_HOST=db
      - POSTGRES_USER=${FAST__DB__USER}
      - POSTGRES_PASSWORD=${FAST__DB__PASSWORD}
      - POSTGRES_DB=${FAST__DB__NAME}
    container_name: app

    command: bash -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - .:/app
    ports:
      - 8000:8000
    restart: always

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery_worker:
    build: .
    user: "1000:1000"  # Run as UID 1000 (non-root)
    command: celery -A src.core.services.tasks.celery_app worker -P eventlet -c 4 -l INFO
    volumes:
      - .:/app
    depends_on:
      - redis

  celery_beat:
    build: .
    user: "1000:1000"  # Run as UID 1000 (non-root)
    command: celery -A src.core.services.tasks.celery_app beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - celery_worker


volumes:
  db-data:
  redis_data: