"""empty message

Revision ID: e42a42399923
Revises: 9effb1223803
Create Date: 2025-06-09 11:33:23.765973

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e42a42399923'
down_revision: Union[str, None] = '9effb1223803'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. First add the login column as nullable
    op.add_column('users', sa.Column('login', sa.String(length=50), nullable=True))
    
    # 2. Copy data from username to login
    op.execute("UPDATE users SET login = username")
    
    # 3. Drop the unique constraint on username
    op.drop_constraint('users_username_key', 'users', type_='unique')
    
    # 4. Make the login column NOT NULL
    op.alter_column('users', 'login', nullable=False)
    
    # 5. Add unique constraint to login
    op.create_unique_constraint('users_login_key', 'users', ['login'])
    
    # 6. Finally drop the username column
    op.drop_column('users', 'username')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Add username column back (nullable first)
    op.add_column('users', sa.Column('username', sa.String(length=50), nullable=True))
    
    # 2. Copy data from login to username
    op.execute("UPDATE users SET username = login")
    
    # 3. Drop the unique constraint on login
    op.drop_constraint('users_login_key', 'users', type_='unique')
    
    # 4. Make username NOT NULL
    op.alter_column('users', 'username', nullable=False)
    
    # 5. Add unique constraint back to username
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    
    # 6. Drop the login column
    op.drop_column('users', 'login')
    # ### end Alembic commands ###